USART_ReadConfig:
    ldi r18, 0					; Counter for 10 bytes
    ldi r30, lo8(CONFIG_START)  ; Load buffer base address into Z (low byte)
    ldi r31, hi8(CONFIG_START)  ; Load buffer base address into Z (high byte)

Read_Loop:
    call USART_Receive
    st Z+, r16					; Store in RAM buffer
    
    inc r18
    cpi r18, 10					; Stop after 10 bytes
    brlo Read_Loop				; Continue loop if less than 10 bytes

    ; Now we have 10 bytes in RAM buffer

    ldi r30, lo8(CONFIG_START)  ; Load buffer base address into Z (low byte)
    ldi r31, hi8(CONFIG_START)  ; Load buffer base address into Z (high byte)

	; Validate Start byte and checksum

	ld r16, Z                    ; Load start byte
    cpi r16, 0xD9                ; Check if start byte is 0xD9
    brne Skip_Write              ; If not, skip writing to EEPROM

	ldi r19, 0                   ; r19 will hold the sum
    ldi r18, 0                   ; Counter for 10 bytes

Checksum_Loop:
    ld r16, Z+
    inc r18
	add r19, r16                 ; Sum bytes into r19
    cpi r18, 9                   ; Stop at 9th byte
    brsh Check_Last_Byte         ; If at last byte, jump to final check
    rjmp Checksum_Loop           ; Repeat for next byte

Check_Last_Byte:
    ld r17, Z                    ; Load 10th byte (Checksum)
    andi r19, 0xFF				 ; Take last 8 bits
    cp r19, r17                  ; Compare calculated checksum with stored checksum
    brne Skip_Write              ; If checksum is incorrect, skip writing

	; If everything correct we write the config to EEPROM

	ldi r18, 0                   ; Reset counter for EEPROM write
    ldi r30, lo8(CONFIG_START)   ; Load buffer base address into Z (low byte)
    ldi r31, hi8(CONFIG_START)   ; Load buffer base address into Z (high byte)

Write_Loop:
    ld r16, Z+
    mov r24, r18                 ; Set low EEPROM address
	ldi r25, 0x00				 ; Set up EEPROM address
    call EEPROM_WriteByteSet     ; Write byte to EEPROM

    inc r18                      ; Increment counter
    cpi r18, 10                  ; Stop after writing 10 bytes
    brlo Write_Loop              ; Continue if more bytes left

    rjmp End_ReadConfig

Skip_Write:
	rjmp End_ReadConfig

End_ReadConfig:
    ret